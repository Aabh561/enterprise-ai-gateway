apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-ai-gateway
  namespace: {{ .Values.namespace }}
  labels:
    app: enterprise-ai-gateway
    component: api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: enterprise-ai-gateway
      component: api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: enterprise-ai-gateway
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8000
        - name: metrics
          containerPort: 9090
        env:
        - name: ENVIRONMENT
          value: {{ .Values.env.ENVIRONMENT | quote }}
        - name: CONFIG_PATH
          value: {{ .Values.env.CONFIG_PATH | quote }}
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        resources:
{{ toYaml .Values.resources | indent 10 }}
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
      volumes:
      - name: config
        configMap:
          name: enterprise-ai-gateway-config
      - name: logs
        emptyDir: {}
